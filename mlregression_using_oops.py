# -*- coding: utf-8 -*-
"""MLRegression_using_OOPs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11dmaM3t9Wy1m3mTzXyRGddF-XRiDvtXP
"""

'''
In this we are going to develop the Multiple Linear Regression using Oops concet
'''
import numpy as np
import pandas as pd
import sklearn
import sys
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error

class MultipleLinearRegression:
    def __init__(self, location):
        try:
            self.df = pd.read_csv(location)
            self.df['State'] = self.df['State'].map({'New York': 0, 'California': 1, 'Florida': 2}).astype(int)
            self.features = self.df.iloc[:, :-1]  # Independent variables
            self.target = self.df.iloc[:, -1]  # Dependent variable
            self.features_train, self.features_test, self.target_train, self.target_test = train_test_split(self.features, self.target, test_size=0.3, random_state=41)
        except FileNotFoundError:
            print("Error: File not found.")
        except Exception as e:
            error_type, error_msg, err_line = sys.exc_info()
            print(f"Error from Line {err_line.tblineno} -> type {error_type.__name__} -> Error msg -> {error_msg}")

    def data_training(self):
        try:
            self.model = LinearRegression()
            self.model.fit(self.features_train, self.target_train)
        except Exception as e:
            error_type, error_msg, err_line = sys.exc_info()
            print(f"Error from Line {err_line.tblineno} -> type {error_type.__name__} -> Error msg -> {error_msg}")

    def training_performance(self):
        try:
            self.target_train_pred = self.model.predict(self.features_train)
            print(f"Train Accuracy is: {r2_score(self.target_train, self.target_train_pred)}")
            print(f"Train Loss is: {mean_squared_error(self.target_train, self.target_train_pred)}")
        except Exception as e:
            error_type, error_msg, err_line = sys.exc_info()
            print(f"Error from Line {err_line.tblineno} -> type {error_type.__name__} -> Error msg -> {error_msg}")

    def testing_performance(self):
        try:
            self.target_test_pred = self.model.predict(self.features_test)
            print(f"Test Accuracy is: {r2_score(self.target_test, self.target_test_pred)}")
            print(f"Test Loss is: {mean_squared_error(self.target_test, self.target_test_pred)}")
        except Exception as e:
            error_type, error_msg, err_line = sys.exc_info()
            print(f"Error from Line {err_line.tblineno} -> type {error_type.__name__} -> Error msg -> {error_msg}")

if __name__ == '__main__':
    try:
        obj = MultipleLinearRegression('50_Startups.csv')
        obj.data_training()
        obj.training_performance()
        obj.testing_performance()
    except Exception as e:
        error_type, error_msg, err_line = sys.exc_info()
        print(f"Error from Line {err_line.tblineno} -> type {error_type.__name__} -> Error msg -> {error_msg}")

